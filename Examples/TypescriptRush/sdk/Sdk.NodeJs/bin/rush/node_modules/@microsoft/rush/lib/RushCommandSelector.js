"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const path = require("path");
/**
 * Both "rush" and "rushx" share the same src/start.ts entry point.  This makes it
 * a little easier for them to share all the same startup checks and version selector
 * logic.  RushCommandSelector looks at argv to determine whether we're doing "rush"
 * or "rushx" behavior, and then invokes the appropriate entry point in the selected
 * @microsoft/rush-lib.
 */
class RushCommandSelector {
    static failIfNotInvokedAsRush(version) {
        if (RushCommandSelector._getCommandName() === 'rushx') {
            RushCommandSelector._failWithError(`This repository is using Rush version ${version}`
                + ` which does not support the "rushx" command`);
        }
    }
    // tslint:disable-next-line:no-any
    static execute(launcherVersion, isManaged, selectedRushLib) {
        const Rush = selectedRushLib.Rush;
        if (!Rush) {
            // This should be impossible unless we somehow loaded an unexpected version
            RushCommandSelector._failWithError(`Unable to find the "Rush" entry point in @microsoft/rush-lib`);
        }
        if (RushCommandSelector._getCommandName() === 'rushx') {
            if (!Rush.launchRushX) {
                RushCommandSelector._failWithError(`This repository is using Rush version ${Rush.version}`
                    + ` which does not support the "rushx" command`);
            }
            Rush.launchRushX(launcherVersion, isManaged);
        }
        else {
            Rush.launch(launcherVersion, isManaged);
        }
    }
    static _failWithError(message) {
        console.log(colors.red(message));
        return process.exit(1);
    }
    static _getCommandName() {
        if (process.argv.length >= 2) {
            // Example:
            // argv[0]: "C:\\Program Files\\nodejs\\node.exe"
            // argv[1]: "C:\\Program Files\\nodejs\\node_modules\\@microsoft\\rush\\bin\\rushx"
            const basename = path.basename(process.argv[1]).toUpperCase();
            if (basename === 'RUSHX') {
                return 'rushx';
            }
            if (basename === 'RUSH') {
                return 'rush';
            }
        }
        return undefined;
    }
}
exports.RushCommandSelector = RushCommandSelector;
//# sourceMappingURL=RushCommandSelector.js.map