"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const semver = require("semver");
const node_core_library_1 = require("@microsoft/node-core-library");
const Utilities_1 = require("@microsoft/rush-lib/lib/utilities/Utilities");
const rush_lib_1 = require("@microsoft/rush-lib");
const RushCommandSelector_1 = require("./RushCommandSelector");
const MAX_INSTALL_ATTEMPTS = 3;
class RushVersionSelector {
    constructor(currentPackageVersion) {
        this._rushGlobalFolder = new rush_lib_1._RushGlobalFolder();
        this._currentPackageVersion = currentPackageVersion;
    }
    ensureRushVersionInstalled(version, configuration) {
        const isLegacyRushVersion = semver.lt(version, '4.0.0');
        const expectedRushPath = path.join(this._rushGlobalFolder.nodeSpecificPath, `rush-${version}`);
        const installMarker = new rush_lib_1._LastInstallFlag(expectedRushPath, { node: process.versions.node });
        let installPromise = Promise.resolve();
        if (!installMarker.isValid()) {
            installPromise = installPromise.then(() => {
                // Need to install Rush
                console.log(`Rush version ${version} is not currently installed. Installing...`);
                const resourceName = `rush-${version}`;
                console.log(`Trying to acquire lock for ${resourceName}`);
                return node_core_library_1.LockFile.acquire(expectedRushPath, resourceName)
                    .then((lock) => {
                    if (installMarker.isValid()) {
                        console.log('Another process performed the installation.');
                    }
                    else {
                        Utilities_1.Utilities.installPackageInDirectory({
                            directory: expectedRushPath,
                            packageName: isLegacyRushVersion ? '@microsoft/rush' : '@microsoft/rush-lib',
                            version: version,
                            tempPackageTitle: 'rush-local-install',
                            maxInstallAttempts: MAX_INSTALL_ATTEMPTS,
                            // This is using a local configuration to install a package in a shared global location.
                            // Generally that's a bad practice, but in this case if we can successfully install
                            // the package at all, we can reasonably assume it's good for all the repositories.
                            // In particular, we'll assume that two different NPM registries cannot have two
                            // different implementations of the same version of the same package.
                            // This was needed for: https://github.com/Microsoft/web-build-tools/issues/691
                            commonRushConfigFolder: configuration ? configuration.commonRushConfigFolder : undefined,
                            suppressOutput: true
                        });
                        console.log(`Successfully installed Rush version ${version} in ${expectedRushPath}.`);
                        // If we've made it here without exception, write the flag file
                        installMarker.create();
                        lock.release();
                    }
                });
            });
        }
        return installPromise.then(() => {
            if (semver.lt(version, '3.0.20')) {
                // In old versions, requiring the entry point invoked the command-line parser immediately,
                // so fail if "rushx" was used
                RushCommandSelector_1.RushCommandSelector.failIfNotInvokedAsRush(version);
                require(path.join(expectedRushPath, 'node_modules', '@microsoft', 'rush', 'lib', 'rush'));
            }
            else if (semver.lt(version, '4.0.0')) {
                // In old versions, requiring the entry point invoked the command-line parser immediately,
                // so fail if "rushx" was used
                RushCommandSelector_1.RushCommandSelector.failIfNotInvokedAsRush(version);
                require(path.join(expectedRushPath, 'node_modules', '@microsoft', 'rush', 'lib', 'start'));
            }
            else {
                // For newer rush-lib, RushCommandSelector can test whether "rushx" is supported or not
                const rushCliEntrypoint = require(path.join(expectedRushPath, 'node_modules', '@microsoft', 'rush-lib', 'lib', 'index'));
                RushCommandSelector_1.RushCommandSelector.execute(this._currentPackageVersion, true, rushCliEntrypoint);
            }
        });
    }
}
exports.RushVersionSelector = RushVersionSelector;
//# sourceMappingURL=RushVersionSelector.js.map