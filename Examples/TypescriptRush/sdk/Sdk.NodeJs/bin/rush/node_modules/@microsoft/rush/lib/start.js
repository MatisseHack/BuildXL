"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
// The minimal set of imports that are safe even for ancient NodeJS versions:
const colors = require("colors");
const os = require("os");
const semver = require("semver");
const nodeVersion = process.versions.node;
// tslint:disable-next-line
// We are on an ancient version of NodeJS that is known not to work with Rush
if (semver.satisfies(nodeVersion, '<= 6.4.0')) {
    console.error(colors.red(`Your version of Node.js (${nodeVersion}) is very old and incompatible with Rush.`
        + ` Please upgrade to the latest Long-Term Support (LTS) version.`));
    process.exit(1);
}
// We are on a much newer release than we have tested and support
// tslint:disable-next-line
else if (semver.satisfies(nodeVersion, '>=11.0.0')) {
    console.warn(colors.yellow(`Your version of Node.js (${nodeVersion}) has not been tested with this release of Rush.`
        + ` The Rush team will not accept issue reports for it.`
        + ` Please consider upgrading Rush or downgrading Node.js.`));
}
// We are not on an LTS release
// tslint:disable-next-line
else if (!semver.satisfies(nodeVersion, '^6.9.0')
    && !semver.satisfies(nodeVersion, '^8.9.0')
    && !semver.satisfies(nodeVersion, '^10.13.0')) {
    console.warn(colors.yellow(`Your version of Node.js (${nodeVersion}) is not a Long-Term Support (LTS) release.`
        + ` These versions frequently contain bugs, and the Rush team will not accept issue reports for them.`
        + ` Please consider installing a stable release.`));
}
const node_core_library_1 = require("@microsoft/node-core-library");
const rushLib = require("@microsoft/rush-lib");
const RushCommandSelector_1 = require("./RushCommandSelector");
const RushVersionSelector_1 = require("./RushVersionSelector");
const MinimalRushConfiguration_1 = require("./MinimalRushConfiguration");
// Load the configuration
const configuration = MinimalRushConfiguration_1.MinimalRushConfiguration.loadFromDefaultLocation();
const currentPackageVersion = node_core_library_1.PackageJsonLookup.loadOwnPackageJson(__dirname).version;
let rushVersionToLoad = undefined;
const previewVersion = process.env["RUSH_PREVIEW_VERSION" /* RUSH_PREVIEW_VERSION */];
if (previewVersion) {
    if (!semver.valid(previewVersion, false)) {
        console.error(colors.red(`Invalid value for RUSH_PREVIEW_VERSION environment variable: "${previewVersion}"`));
        process.exit(1);
    }
    rushVersionToLoad = previewVersion;
    const lines = [];
    lines.push(`*********************************************************************`, `* WARNING! THE "RUSH_PREVIEW_VERSION" ENVIRONMENT VARIABLE IS SET.  *`, `*                                                                   *`, `* You are previewing Rush version:        ${node_core_library_1.Text.padEnd(previewVersion, 25)} *`);
    if (configuration) {
        lines.push(`* The rush.json configuration asks for:   ${node_core_library_1.Text.padEnd(configuration.rushVersion, 25)} *`);
    }
    lines.push(`*                                                                   *`, `* To restore the normal behavior, unset the RUSH_PREVIEW_VERSION    *`, `* environment variable.                                             *`, `*********************************************************************`);
    console.error(lines
        .map(line => colors.black(colors.bgYellow(line)))
        .join(os.EOL));
}
else if (configuration) {
    rushVersionToLoad = configuration.rushVersion;
}
// If we are previewing an older Rush that doesn't understand the RUSH_PREVIEW_VERSION variable,
// then unset it.
if (rushVersionToLoad && semver.lt(rushVersionToLoad, '5.0.0-dev.18')) {
    delete process.env["RUSH_PREVIEW_VERSION" /* RUSH_PREVIEW_VERSION */];
}
// If we're inside a repo folder, and it's requesting a different version, then use the RushVersionManager to
// install it
if (rushVersionToLoad && rushVersionToLoad !== currentPackageVersion) {
    const versionSelector = new RushVersionSelector_1.RushVersionSelector(currentPackageVersion);
    versionSelector.ensureRushVersionInstalled(rushVersionToLoad, configuration)
        .catch((error) => {
        console.log(colors.red('Error: ' + error.message));
    });
}
else {
    // Otherwise invoke the rush-lib that came with this rush package
    // Rush is "managed" if its version and configuration are dictated by a repo's rush.json
    const isManaged = !!configuration;
    RushCommandSelector_1.RushCommandSelector.execute(currentPackageVersion, isManaged, rushLib);
}
//# sourceMappingURL=start.js.map